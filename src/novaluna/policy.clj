(ns novaluna.policy
  (:require [novaluna.game :as game]
            [novaluna.state :as st]
            [novaluna.action :as act]))

(defn argmin
  "Return the value x in xs that minimises (f x)."
  [f xs]
  (if (nil? xs)
    nil
    (apply min-key f (shuffle xs))))

(defn random-element
  "Choose a random element from a collection"
  [coll]
  (first (shuffle coll)))

(defn random-play
  [state player]
  (let [tile (random-element (act/eligible-tiles state))
        pos (random-element (act/available-spaces state player))]
    (act/play-tile state player tile pos)))

(defn alpha
  "Policy alpha: minimise the score from the states generated by all available tiles and placements"
  [state player]
  (->> (for [tile (act/eligible-tiles state)
             pos (act/available-spaces state player)]
         (act/play-tile state player tile pos))
       (argmin #(game/score % player))))

(defn play-n-tiles
  "Play a policy n times"
  [state policy-fn player n]
  (reduce (fn [st _] (policy-fn st player))
          state
          (range n)))

;; The End
